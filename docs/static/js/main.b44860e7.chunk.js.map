{"version":3,"sources":["WordGrid.js","App.js","reportWebVitals.js","DataSource.js","index.js"],"names":["WordGrid","props","handleNewWordChange","event","setState","newWord","target","value","handleNewWordKeyPress","key","handleNewWord","state","toUpperCase","newState","startWord","endWord","midWord","undefined","dataSource","database","console","warn","singletonRef","ref","set","addField","current","focus","React","createRef","this","canAdd","startBet","endBet","onClick","handleStartBet","handleEndBet","className","colspan","type","placeholder","autoFocus","onKeyPress","onChange","disabled","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","connect","app","initializeApp","getDatabase","auth","getAuth","signInAnonymously","onAuthStateChanged","user","userId","uid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b44860e7.chunk.js","sourcesContent":["import { set, ref } from '@firebase/database';\nimport React from 'react';\n\nclass WordGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        let startWord = props.startWord || '',\n            midWord = props.midWord || '',\n            endWord = props.endWord || '',\n            newWord = props.newWord || '';\n        this.state = {\n            startWord: startWord.toUpperCase(),\n            midWord: midWord.toUpperCase(),\n            endWord: endWord.toUpperCase(),\n            newWord: newWord,\n            dataSource: props.dataSource\n        };\n        this.addField = React.createRef();\n    }\n\n    handleNewWordChange = event => {\n        this.setState({newWord: event.target.value});\n    };\n\n    handleNewWordKeyPress = event => {\n        if (event.key === 'Enter') {\n            this.handleNewWord();\n        }\n    };\n\n    handleNewWord = () => {\n        const newWord = this.state.newWord.toUpperCase(),\n            newState = {newWord: ''};\n        if ( ! this.state.startWord) {\n            newState.startWord = newWord;\n        } else if ( ! this.state.endWord) {\n            if (this.state.startWord < newWord) {\n                newState.endWord = newWord;\n            } else {\n                newState.startWord = newWord;\n                newState.endWord = this.state.startWord;\n            }\n        } else if ( ! this.state.midWord) {\n            newState.midWord = newWord;\n        } else if (newWord < this.state.midWord) {\n            newState.midWord = newWord;\n            newState.endWord = this.state.midWord;\n        } else {\n            newState.startWord = this.state.midWord;\n            newState.midWord = newWord;\n        }\n        this.setState(newState);\n        if (this.state.dataSource !== undefined) {\n            if (this.state.dataSource.database === undefined) {\n                console.warn(\"Undefined database!\");\n            } else {\n                const singletonRef = ref(this.state.dataSource.database, 'singleton');\n                set(singletonRef, newState);\n            }\n        }\n        this.addField.current.focus();\n    };\n\n    render() {\n        const newWord = this.state.newWord.toUpperCase(),\n              canAdd = (\n                  (newWord && ! this.state.endWord) ||\n                  (this.state.startWord < newWord && newWord < this.state.endWord));\n        let startBet = null,\n            endBet = null;\n        if (this.state.midWord)  {\n            startBet = <button onClick={this.handleStartBet}>Bet Before</button>;\n            endBet = <button onClick={this.handleEndBet}>Bet After</button>;\n        }\n        return <table className=\"WordGrid\"><tbody>\n            {(this.state.startWord &&\n              <tr><td>{this.state.startWord}</td><td>{startBet}</td></tr>)||null}\n            {(this.state.midWord &&\n              <tr><td colspan=\"2\">{this.state.midWord}</td></tr>)||null}\n            {(this.state.endWord &&\n              <tr><td>{this.state.endWord}</td><td>{endBet}</td></tr>)||null}\n            <tr>\n                <td><input\n                    type=\"text\"\n                    placeholder=\"Type a word here.\"\n                    value={this.state.newWord}\n                    ref={this.addField}\n                    autoFocus\n                    onKeyPress={this.handleNewWordKeyPress}\n                    onChange={this.handleNewWordChange}/>\n\n                </td><td><button onClick={this.handleNewWord} disabled={ ! canAdd}>\n                    Add\n                </button></td>\n            </tr>\n        </tbody></table>;\n    }\n}\n\nexport default WordGrid;\n","import './App.css';\nimport './WordGrid';\nimport WordGrid from './WordGrid';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <WordGrid dataSource={props.dataSource}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// noinspection ES6CheckImport\nimport {initializeApp} from \"firebase/app\";\n// noinspection ES6CheckImport\nimport {getAuth, onAuthStateChanged, signInAnonymously} from \"firebase/auth\";\n// noinspection ES6CheckImport\nimport {getDatabase} from \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDRerCMPl3Gvlz26gNfhR6OZhpIfViIJlU\",\n    authDomain: \"halfabet-3dd2b.firebaseapp.com\",\n    databaseURL: \"https://halfabet-3dd2b-default-rtdb.firebaseio.com\",\n    projectId: \"halfabet-3dd2b\",\n    storageBucket: \"halfabet-3dd2b.appspot.com\",\n    messagingSenderId: \"779402201993\",\n    appId: \"1:779402201993:web:8e638d876b3402d4ea2f58\"\n};\n\n\nclass DataSource {\n    connect = () => {\n        // Initialize Firebase\n        console.warn(\"Initializing app.\");\n        this.app = initializeApp(firebaseConfig);\n        console.warn(\"App result: \" + this.app);\n        this.database = getDatabase(this.app);\n        console.warn(\"Connection result: \" + this.database);\n        const auth = getAuth();\n        signInAnonymously(auth);\n        let dataSource = this;\n        onAuthStateChanged(auth, (user) => {\n            if (user) {\n                // User is signed in\n                dataSource.userId = user.uid;\n            } else {\n                // User is signed out\n                dataSource.userId = undefined;\n            }\n        });\n\n    }\n}\n\nexport default DataSource;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport DataSource from \"./DataSource\";\n\nconst dataSource = new DataSource();\ndataSource.connect()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App dataSource={dataSource}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}