{"version":3,"sources":["WordGrid.js","App.js","reportWebVitals.js","DataSource.js","index.js"],"names":["WordGrid","props","handleDatabaseWords","snapshot","wordInfo","val","setState","startWord","midWord","endWord","handleNewWordChange","event","newWord","target","value","handleNewWordKeyPress","key","handleNewWord","state","toUpperCase","newState","saveState","Object","assign","checkDataSource","singletonRef","ref","dataSource","database","set","addField","current","focus","undefined","console","warn","handleStartBet","reset","handleEndBet","confirmReset","window","confirm","React","createRef","onValue","this","canAdd","onKeyPress","startBet","endBet","onClick","className","colSpan","type","placeholder","autoFocus","onChange","disabled","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","connect","app","initializeApp","getDatabase","auth","getAuth","signInAnonymously","onAuthStateChanged","user","userId","uid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce95fe7.chunk.js","sourcesContent":["import { set, ref, onValue } from '@firebase/database';\nimport React from 'react';\n\nclass WordGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        let startWord = props.startWord || '',\n            midWord = props.midWord || '',\n            endWord = props.endWord || '',\n            newWord = props.newWord || '';\n        this.state = {\n            startWord: startWord.toUpperCase(),\n            midWord: midWord.toUpperCase(),\n            endWord: endWord.toUpperCase(),\n            newWord: newWord,\n            dataSource: props.dataSource,\n            confirmReset: props.confirmReset\n        };\n        this.addField = React.createRef();\n        if (this.checkDataSource()) {\n            const singletonRef = ref(this.state.dataSource.database, 'singleton');\n            onValue(singletonRef, this.handleDatabaseWords);\n        }\n    }\n\n    handleDatabaseWords = (snapshot) => {\n        const wordInfo = snapshot.val();\n        if (wordInfo === null) {\n            return;\n        }\n        this.setState({\n            startWord: wordInfo.startWord,\n            midWord: wordInfo.midWord,\n            endWord: wordInfo.endWord\n        });\n    };\n\n    handleNewWordChange = event => {\n        this.setState({newWord: event.target.value});\n    };\n\n    handleNewWordKeyPress = event => {\n        if (event.key === 'Enter') {\n            this.handleNewWord();\n        }\n    };\n\n    handleNewWord = () => {\n        const newWord = this.state.newWord.toUpperCase(),\n            newState = {},\n            saveState = {\n                startWord: this.state.startWord,\n                midWord: this.state.midWord,\n                endWord: this.state.endWord\n            };\n        if ( ! this.state.startWord) {\n            newState.startWord = newWord;\n        } else if ( ! this.state.endWord) {\n            if (this.state.startWord < newWord) {\n                newState.endWord = newWord;\n            } else {\n                newState.startWord = newWord;\n                newState.endWord = this.state.startWord;\n            }\n        } else if ( ! this.state.midWord) {\n            newState.midWord = newWord;\n        } else if (newWord < this.state.midWord) {\n            newState.midWord = newWord;\n            newState.endWord = this.state.midWord;\n        } else {\n            newState.startWord = this.state.midWord;\n            newState.midWord = newWord;\n        }\n        Object.assign(saveState, newState);\n        newState.newWord = '';\n        this.setState(newState);\n        if (this.checkDataSource()) {\n            const singletonRef = ref(this.state.dataSource.database, 'singleton');\n            set(singletonRef, saveState);\n        }\n        this.addField.current.focus();\n    };\n\n    checkDataSource = () => {\n        if (this.state.dataSource !== undefined) {\n            if (this.state.dataSource.database !== undefined) {\n                return true;\n            }\n            console.warn(\"Undefined database!\");\n            this.setState({dataSource: undefined});\n        }\n        return false;\n    };\n\n    handleStartBet = () => {\n        this.reset();\n    }\n\n    handleEndBet = () => {\n        this.reset();\n    }\n\n    reset = () => {\n        if (this.state.confirmReset) {\n            if ( ! window.confirm(\"Reset the game?\")) {\n                return;\n            }\n        }\n        this.setState({startWord: \"\", midWord: \"\", endWord: \"\", newWord: \"\"});\n    };\n\n    render() {\n        const newWord = this.state.newWord.toUpperCase(),\n              canAdd = (\n                  (newWord && ! this.state.endWord) ||\n                  (this.state.startWord < newWord && newWord < this.state.endWord)),\n              onKeyPress = (canAdd && this.handleNewWordKeyPress) || (() => {});\n        let startBet = null,\n            endBet = null;\n        if (this.state.midWord)  {\n            startBet = <button onClick={this.handleStartBet}>Bet Before</button>;\n            endBet = <button onClick={this.handleEndBet}>Bet After</button>;\n        }\n        return <table className=\"WordGrid\"><tbody>\n            {(this.state.startWord &&\n              <tr><td>{this.state.startWord}</td><td>{startBet}</td></tr>)||null}\n            {(this.state.midWord &&\n              <tr><td colSpan=\"2\">{this.state.midWord}</td></tr>)||null}\n            {(this.state.endWord &&\n              <tr><td>{this.state.endWord}</td><td>{endBet}</td></tr>)||null}\n            <tr>\n                <td><input\n                    type=\"text\"\n                    placeholder=\"Type a word here.\"\n                    value={this.state.newWord}\n                    ref={this.addField}\n                    autoFocus\n                    onKeyPress={onKeyPress}\n                    onChange={this.handleNewWordChange}/>\n\n                </td><td><button onClick={this.handleNewWord} disabled={ ! canAdd}>\n                    Add\n                </button></td>\n            </tr>\n        </tbody></table>;\n    }\n}\n\nexport default WordGrid;\n","import './App.css';\nimport './WordGrid';\nimport WordGrid from './WordGrid';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <WordGrid dataSource={props.dataSource} confirmReset=\"yes\"/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// noinspection ES6CheckImport\nimport {initializeApp} from \"firebase/app\";\n// noinspection ES6CheckImport\nimport {getAuth, onAuthStateChanged, signInAnonymously} from \"firebase/auth\";\n// noinspection ES6CheckImport\nimport {getDatabase} from \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDRerCMPl3Gvlz26gNfhR6OZhpIfViIJlU\",\n    authDomain: \"halfabet-3dd2b.firebaseapp.com\",\n    databaseURL: \"https://halfabet-3dd2b-default-rtdb.firebaseio.com\",\n    projectId: \"halfabet-3dd2b\",\n    storageBucket: \"halfabet-3dd2b.appspot.com\",\n    messagingSenderId: \"779402201993\",\n    appId: \"1:779402201993:web:8e638d876b3402d4ea2f58\"\n};\n\n\nclass DataSource {\n    connect = () => {\n        // Initialize Firebase\n        this.app = initializeApp(firebaseConfig);\n        this.database = getDatabase(this.app);\n        const auth = getAuth();\n        signInAnonymously(auth);\n        let dataSource = this;\n        onAuthStateChanged(auth, (user) => {\n            if (user) {\n                // User is signed in\n                dataSource.userId = user.uid;\n            } else {\n                // User is signed out\n                dataSource.userId = undefined;\n            }\n        });\n\n    }\n}\n\nexport default DataSource;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport DataSource from \"./DataSource\";\n\nconst dataSource = new DataSource();\ndataSource.connect()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App dataSource={dataSource}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}